---
- name: End-to-End flow for creating a VM using CDI
  hosts: localhost
  connection: local
  module_defaults:
    group/k8s:
      namespace: default
  vars:
    vm_name: cirros-e2e-vm
    vmi_name: cirros-e2e-vmi
    pvc_name: cirros-e2e-pvc
    pvc2_name: cirros-e2e-pvc2
    service_name: cirros-e2e-service
  tasks:
    - name: Create PVC with CDI annotations
      kubevirt_pvc:
        state: present
        name: "{{ pvc_name }}"
        access_modes:
        - ReadWriteOnce
        size: 100Mi
        cdi_source:
          http:
            url: "https://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img"
        wait: yes

    - name: Create a clone of previous PVC
      kubevirt_pvc:
        state: present
        name: "{{ pvc2_name }}"
        access_modes:
        - ReadWriteOnce
        size: 100Mi
        cdi_source:
          pvc:
            namespace: default
            name: "{{ pvc_name }}"
        wait: yes

    - name: Create an ephemeral VM with the cloned PVC
      kubevirt_vm:
        state: present
        name: "{{ vmi_name }}"
        ephemeral: yes
        memory: 64Mi
        cpu_cores: 1
        disks:
        - name: rootdisk
          volume:
            persistentVolumeClaim:
              claimName: "{{ pvc2_name }}"
          disk:
            bus: virtio

    - name: Verify the ephemeral VM is in fact running
      k8s_facts:
        name: "{{ vmi_name }}"
        kind: VirtualMachineInstance
        api_version: kubevirt.io/v1alpha3
      register: vmi
      until: "vmi.resources[0].status['phase'] == 'Running'"
      delay: 1
      retries: 1

    - name: Remove the ephemeral VM
      kubevirt_vm:
        state: absent
        name: "{{ vmi_name }}"
        ephemeral: yes

    - name: Create a VM with the CDI PVC that was created
      kubevirt_vm:
        state: present
        name: "{{ vm_name }}"
        labels:
          special: cirros-e2e-key
        memory: 64Mi
        cpu_cores: 1
        disks:
        - name: rootdisk
          volume:
            persistentVolumeClaim:
              claimName: "{{ pvc_name }}"
          disk:
            bus: virtio

    - name: Change VM status to running
      kubevirt_vm:
        state: running
        name: "{{ vm_name }}"

    - name: Verify that VM is ready
      k8s_facts:
        name: "{{ vm_name }}"
        kind: VirtualMachine
        api_version: kubevirt.io/v1alpha3
      register: vm
      until: "vm.resources[0].status['created'] == true and vm.resources[0].status['ready'] == true"
      delay: 1
      retries: 1

    - name: Increase the resources of VM
      kubevirt_vm:
       state: present
       name: '{{ vm_name }}'
       namespace: default
       memory: 128Mi
       cpu_cores: 2

    - name: Restart the VM
      kubevirt_vm:
        state: "{{ item }}"
        name: "{{ vm_name }}"
      with_items:
        - "stopped"
        - "running"

    - name: Verify that VM is ready
      k8s_facts:
        name: "{{ vm_name }}"
        kind: VirtualMachine
        api_version: kubevirt.io/v1alpha3
      register: vm
      until: "vm.resources[0].status['created'] == true and vm.resources[0].status['ready'] == true"
      delay: 1
      retries: 1

    - name: Expose the VMI using service
      k8s_service:
        state: present
        name: "{{ service_name }}"
        type: NodePort
        ports:
          - name: http
            nodePort: 30000
            port: 27017
            targetPort: 22
            protocol: TCP
        selector:
          special: cirros-e2e-key
        definition:
          metadata:
            labels:
              kubevirt.io/vm: cirros-e2e-service
          spec:
            externalTrafficPolicy: Cluster

    - name: Gather facts for {{ vm_name }} VMI in default namespace
      k8s_facts:
        name: "{{ vm_name }}"
        kind: VirtualMachineInstance
        api_version: kubevirt.io/v1alpha3
      register: vmi

    - name: Wait for port to be opened
      wait_for:
        host: "{{ vmi.resources[0].status.nodeName}}"
        port: 30000
        delay: 10
      register: result

    - name: Check ssh is executed for VM
      assert:
        that:
          - "result['state'] == 'started'"
        fail_msg: "ssh is not established "
