---
- name: End-to-End flow for creating a VM using CDI
  hosts: localhost
  connection: local
  vars:
    vm_name: e2e-vm
    pvc_name: e2e-pvc
  tasks:
    - name: Create PVC with CDI annotations
      k8s:
        state: present
        namespace: default
        name: "{{ pvc_name }}"
        inline:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ pvc_name }}"
            labels:
              app: containerized-data-importer
            annotations:
              cdi.kubevirt.io/storage.import.endpoint: "https://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img"
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          storageClassName: default

    - name: Wait for PVC to be ready
      k8s_facts:
        name: "{{ pvc_name }}"
        namespace: default
        kind: PersistentVolumeClaim
        api_version: v1
      register: pvc
      until: "pvc.resources[0].status.phase == 'Bound' and pvc.resources[0].metadata.annotations['cdi.kubevirt.io/storage.pod.phase'] == 'Succeeded'"
      delay: 10
      retries: 18

    - name: Create a VM with the CDI PVC that was created
      k8s:
       state: present
       name: '{{ vm_name }}'
       namespace: default
       inline:
         apiVersion: kubevirt.io/v1alpha2
         kind: VirtualMachine
         metadata:
           name: '{{ vm_name }}'
           namespace: default
           labels:
             kubevirt.io/vm: test
         spec:
           running: false
           template:
             metadata:
               labels:
                 kubevirt-vm: cirros
                 special: e2e-key
             spec:
               domain:
                 resources:
                   requests:
                     memory: 512Mi
                 cpu:
                   cores: 1
                 devices:
                   disks:
                   - volumeName: disk0-pvc
                     name: mydisk
                     disk:
                       bus: virtio
                   - name: cloudinitdisk
                     volumeName: cloudinitvolume
                     cdrom:
                       bus: virtio
               volumes:
               - name: disk0-pvc
                 persistentVolumeClaim:
                   claimName: '{{ pvc_name }}'
               - name: cloudinitvolume
                 cloudInitNoCloud:
                   userData: |
                     #cloud-config
                     password: "redhat"
                     chpasswd: ( expire: False )

    - name: Change VM status to running
      kubevirt_vm:
        state: running
        name: '{{ vm_name }}'
        namespace: default

    - name: Incrase the resources of VM
      k8s:
       state: present
       name: '{{ vm_name }}'
       namespace: default
       inline:
         apiVersion: kubevirt.io/v1alpha2
         kind: VirtualMachine
         metadata:
           name: '{{ vm_name }}'
           namespace: default
           labels:
             kubevirt.io/vm: test
         spec:
           template:
             metadata:
               labels:
                 kubevirt-vm: cirros
                 special: e2e-key
             spec:
               domain:
                 resources:
                   requests:
                     memory: 1Gi

    - name: Restart the VM
      kubevirt_vm:
        state: "{{ item }}"
        name: "{{ vm_name }}"
        namespace: default
      with_items:
        - "stopped"
        - "running"
