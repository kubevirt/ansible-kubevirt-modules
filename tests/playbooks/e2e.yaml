---
- name: End-to-End flow for creating a VM using CDI
  hosts: localhost
  connection: local
  vars:
    vm_name: cirros-e2e-vm
    pvc_name: cirros-e2e-pvc
    service_name: cirros-e2e-service
  tasks:
    - name: Create PVC with CDI annotations
      k8s:
        state: present
        namespace: default
        name: "{{ pvc_name }}"
        inline:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ pvc_name }}"
            labels:
              app: cirros-cdi
            annotations:
              cdi.kubevirt.io/storage.import.endpoint: "https://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img"
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          storageClassName: default

    - name: Wait for PVC to be ready
      k8s_facts:
        name: "{{ pvc_name }}"
        namespace: default
        kind: PersistentVolumeClaim
        api_version: v1
      register: pvc
      until: "pvc.resources[0].status.phase == 'Bound' and 'cdi.kubevirt.io/storage.pod.phase' in pvc.resources[0].metadata.annotations and pvc.resources[0].metadata.annotations['cdi.kubevirt.io/storage.pod.phase'] == 'Succeeded'"
      delay: 10
      retries: 18

    - name: Create a VM with the CDI PVC that was created
      kubevirt_vm:
        state: present
        name: "{{ vm_name }}"
        namespace: default
        labels:
          special: cirros-e2e-key
        memory: 64Mi
        cpu_cores: 1
        disks:
        - name: rootdisk
          volume:
            persistentVolumeClaim:
              claimName: "{{ pvc_name }}"
          disk:
            bus: virtio

    - name: Change VM status to running
      kubevirt_vm:
        state: running
        name: "{{ vm_name }}"
        namespace: default

    - name: Wait for VM to be ready
      k8s_facts:
        name: "{{ vm_name }}"
        namespace: default
        kind: VirtualMachine
        api_version: kubevirt.io/v1alpha3
      register: vm
      until: "vm.resources[0].status['created'] == true and vm.resources[0].status['ready'] == true"
      delay: 10
      retries: 18

    - name: Increase the resources of VM
      kubevirt_vm:
       state: present
       name: '{{ vm_name }}'
       namespace: default
       memory: 1Gi
       cpu_cores: 2

    - name: Restart the VM
      kubevirt_vm:
        state: "{{ item }}"
        name: "{{ vm_name }}"
        namespace: default
      with_items:
        - "stopped"
        - "running"

    - name: Wait for VM to be ready
      k8s_facts:
        name: "{{ vm_name }}"
        namespace: default
        kind: VirtualMachine
        api_version: kubevirt.io/v1alpha3
      register: vm
      until: "vm.resources[0].status['created'] == true and vm.resources[0].status['ready'] == true"
      delay: 10
      retries: 18

    - name: Expose the VMI using service
      k8s_service:
        state: present
        name: "{{ service_name }}"
        namespace: default
        type: NodePort
        ports:
          - name: http
            nodePort: 30000
            port: 27017
            targetPort: 22
            protocol: TCP
        selector:
          special: cirros-e2e-key
        definition:
          metadata:
            labels:
              kubevirt.io/vm: cirros-e2e-service
          spec:
            externalTrafficPolicy: Cluster

    - name: Gather facts for {{ vm_name }} VMI in default namespace
      k8s_facts:
        name: "{{ vm_name }}"
        namespace: default
        kind: VirtualMachineInstance
        api_version: kubevirt.io/v1alpha3
      register: vmi

    - name: Wait for port to be oppened
      wait_for:
        host: "{{ vmi.resources[0].status.nodeName}}"
        port: 30000
        delay: 10
      register: result

    - name: Check ssh is executed for VM
      assert:
        that:
          - "result['state'] == 'started'"
        fail_msg: "ssh is not established "
